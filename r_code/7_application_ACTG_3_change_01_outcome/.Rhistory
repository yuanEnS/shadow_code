optim(
ini_val_xi_y_1111,
Neg_MLE_P_Y1111,
data = dat,
method = "BFGS"
)$par
xi_y_1101 <-
optim(
ini_val_xi_y_1101,
Neg_MLE_P_Y1101,
data = dat,
method = "BFGS"
)$par
# P_R111 = Pr(R = 1 | S = 1, Z = 1, A, C) = expit((A,C) xi_r_111)
ini_val_xi_r_111 <- runif(ncol(C) + 1)
ini_val_xi_r_110 <- runif(ncol(C) + 1)
xi_r_111 <-
optim(
ini_val_xi_r_111,
Neg_MLR_R_111,
data = dat,
method = "BFGS"
)$par
xi_r_110 <-
optim(
ini_val_xi_r_110,
Neg_MLR_R_111,
data = dat,
method = "BFGS"
)$par
xi_r_110
# 1. Packages -------------------------------------------------------------
rm(list = ls())
library(dplyr)
library(gmm)
library(parallel)
library(speff2trial)
# 2. Data processing ------------------------------------------------------
data("ACTG175")
source("../1_functions/0_basic_functions.R")
source("../../1_functions/0_basic_functions.R")
# 1. Packages -------------------------------------------------------------
rm(list = ls())
library(dplyr)
library(gmm)
library(parallel)
library(speff2trial)
# 2. Data processing ------------------------------------------------------
data("ACTG175")
source("../../1_functions/0_basic_functions.R")
source("../../1_functions/1_alphaPred.R")
source("../../1_functions/2_betaPred.R")
source("../../1_functions/3_1_gammaPred_for_application.R")
source("../../1_functions/4_etaPred_for_application.R")
source("../../1_functions/5_application.R")
source("./functions4data/MLEs.R")
covariates <- c("wtkg","gender","karnof","str2","symptom")
case_trial <- 11
C <- rep(1,nrow(ACTG175))
for(c in covariates){
print(c)
if(c == 'age' | c == 'wtkg' | c == 'karnof'){
C <- cbind(C,scale(select(ACTG175,c)))
}
else{
C <- cbind(C,select(ACTG175,c))
}
}
C <- as.data.frame(C)
colnames(C)[1] <- "bias"
A <- ACTG175$cd40
A <- scale(A)
Z <- (ACTG175$arms == 1 | ACTG175$arms == 2)
S <- (ACTG175$cens & (ACTG175$days<7*96))
S[S] <- 1
# S <- ACTG175$offtrt==0
delta_cd4 <- ACTG175$cd496 - ACTG175$cd40
R <- (ACTG175$r == 1)
R[R] <- 1
Y <- c()
for(i in 1:length(delta_cd4)){
if(is.na(delta_cd4[i])){
Y <- c(Y,NA)
}
# else if(delta_cd4[i] - medi_delta > 0){
else if(delta_cd4[i] > 0){
Y <- c(Y,1)
}
else{
Y <- c(Y,0)
}
}
Y[is.na(Y)] <- -1
dat <- cbind(C,A,Z,S,Y,R)
head(dat)
# 3. Model Building & Parameter Estimation-------------------------------------------------------
dat_obs <- dat
dim_status <- c(ncol(C),1,1,1,1,1)
### pr(R = 1 | S = 1 ,A, C, Y; alpha)
### pr(S = 1 | Z = 1, A ,C; beta1)
### pr(S = 1 | Z = 0, A ,C; beta01)
### E[Y | Z = 1, G = g, C ] = \mu_g(C; \gamma_g)
### E[Y | Z = 0, S = 1, C] = m(C; \eta)
## initial values
set.seed(20230701)
ini_val_alpha <- runif( (ncol(C)+2))
ini_val_beta1 <- runif( ncol(C) + 1)
ini_val_beta01 <- runif( ncol(C) + 1)
ini_val_gamma_LL <- runif(ncol(C))
ini_val_gamma_LD <- runif(ncol(C))
ini_val_eta <- runif(ncol(C))
hat_alpha <-
alphaPred(ini_val_alpha = ini_val_alpha,
C,
A,
Z,
S,
Y,
R,
dim_status = dim_status)$coefficients
beta_estimate <-
optim(
c(ini_val_beta1, ini_val_beta01),
Neg_MLE,
data = select(dat_obs, c('bias',covariates,'A','Z','S')),
method = "BFGS"
)$par
hat_beta1 <- beta_estimate[1:(ncol(C) + 1)]
hat_beta01 <- beta_estimate[(ncol(C) + 2):length(beta_estimate)]
rm(list = c("beta_estimate"))
hat_gamma_BB<- gammaPred_BB(ini_val_gamma_LL,
ini_val_gamma_LD,
C,
A,
Z,
S,
Y,
R,
dim_status,
hat_alpha,
hat_beta1,
hat_beta01)
hat_gamma <- hat_gamma_BB$par
hat_gamma_LL <- hat_gamma[1:(length(hat_gamma)/2)]
hat_gamma_LD <- hat_gamma[(length(hat_gamma)/2+1):length(hat_gamma)]
### singular:: to check the gradients. rank(A*A^T) = rank(A), A is gradients of m_sum
hat_eta <- etaPred(
ini_val_eta = ini_val_eta,
C,
A,
Z,
S,
Y,
R,
dim_status = dim_status,
hat_alpha = hat_alpha,
hat_beta1 = hat_beta1,
hat_beta01 = hat_beta01
)$coefficients
# f(G = LL | A, C)
theta1_value <-  expit(as.matrix(cbind(C, A)) %*% hat_beta1)
theta01_value <- expit(as.matrix(cbind(C, A)) %*% hat_beta01)
fLLAC <- theta1_value * theta01_value
rm(list = c("theta01_value","theta1_value"))
# Pr(G = LL | A,C)
ELLAC <- mean(fLLAC)
ELLLDAC <- mean(theta1_value)
theta1_value <-  expit(as.matrix(cbind(C, A)) %*% hat_beta1)
theta01_value <- expit(as.matrix(cbind(C, A)) %*% hat_beta01)
fLLAC <- theta1_value * theta01_value
rm(list = c("theta01_value","theta1_value"))
# Pr(G = LL | A,C)
ELLAC <- mean(fLLAC)
theta1_value <-  expit(as.matrix(cbind(C, A)) %*% hat_beta1)
theta01_value <- expit(as.matrix(cbind(C, A)) %*% hat_beta01)
fLLAC <- theta1_value * theta01_value
# Pr(G = LL | A,C)
ELLAC <- mean(fLLAC)
ELLLDAC <- mean(theta1_value)
# \pi_1^U
pi_1_U <- mean(
(expit(as.matrix(cbind(C, A)) %*% xi_y_1111) * expit(as.matrix(cbind(C, A)) %*% xi_r_111)
+  expit(as.matrix(cbind(C, A)) %*% (1 - xi_r_111))) * theta1_value
)/ELLLDAC
xi_y_1111 <-
optim(
ini_val_xi_y_1111,
Neg_MLE_P_Y1111,
data = dat,
method = "BFGS"
)$par
#P_Y11z1 = Pr(Y = 1 | S = 1, A, C, Z = 1, R = 1) = expit((A,C) xi_y_1111)
ini_val_xi_y_1111 <- runif(ncol(C) + 1)
ini_val_xi_y_1101 <- runif(ncol(C) + 1)
xi_y_1111 <-
optim(
ini_val_xi_y_1111,
Neg_MLE_P_Y1111,
data = dat,
method = "BFGS"
)$par
xi_y_1101 <-
optim(
ini_val_xi_y_1101,
Neg_MLE_P_Y1101,
data = dat,
method = "BFGS"
)$par
# P_R111 = Pr(R = 1 | S = 1, Z = 1, A, C) = expit((A,C) xi_r_111)
ini_val_xi_r_111 <- runif(ncol(C) + 1)
ini_val_xi_r_110 <- runif(ncol(C) + 1)
xi_r_111 <-
optim(
ini_val_xi_r_111,
Neg_MLR_R_111,
data = dat,
method = "BFGS"
)$par
xi_r_110 <-
optim(
ini_val_xi_r_110,
Neg_MLR_R_111,
data = dat,
method = "BFGS"
)$par
# Pr(G = LL)
Pr_G_LL <- ELLAC
# Pr(G = LL) + Pr(G = LD)
Pr_G_LLLD <- ELLLDAC
gamma <- Pr_G_LL/Pr_G_LLLD
# \pi_1^U
pi_1_U <- mean(
(expit(as.matrix(cbind(C, A)) %*% xi_y_1111) * expit(as.matrix(cbind(C, A)) %*% xi_r_111)
+  expit(as.matrix(cbind(C, A)) %*% (1 - xi_r_111))) * theta1_value
)/ELLLDAC
pi_1_L <- mean(
(expit(as.matrix(cbind(C, A)) %*% xi_y_1111) * expit(as.matrix(cbind(C, A)) %*% xi_r_111)
) * theta1_value
)/ELLLDAC
pi_1_L
pi_1_U
gamma
# \pi_1
pi_1_U <- mean(
(expit(as.matrix(cbind(C, A)) %*% xi_y_1111) * expit(as.matrix(cbind(C, A)) %*% xi_r_111)
+ (1 -  expit(as.matrix(cbind(C, A)) %*%  xi_r_111))) * theta1_value
)/ELLLDAC
# \xi
xi_U <- mean(
(expit(as.matrix(cbind(C, A)) %*% xi_y_1101) * expit(as.matrix(cbind(C, A)) %*% xi_r_110)
+  (1 - expit(as.matrix(cbind(C, A)) %*% xi_r_110))) * fLLAC
)/ELLAC
xi_L <- mean(
(expit(as.matrix(cbind(C, A)) %*% xi_y_1101) * expit(as.matrix(cbind(C, A)) %*% xi_r_110)
) * fLLAC
)/ELLAC
xi_U
xi_L
min_bound <- max(0,(pi_1_L - 1 + gamma)/gammma) - xi_U
max_bound <- min(1, pi_1_U/gamma) - xi_L
min_bound <- max(0,(pi_1_L - 1 + gamma)/gamma) - xi_U
min_bound
max_bound
# 1. Packages -------------------------------------------------------------
rm(list = ls())
library(dplyr)
library(gmm)
library(parallel)
library(speff2trial)
# 2. Data processing ------------------------------------------------------
data("ACTG175")
source("../../1_functions/0_basic_functions.R")
source("../../1_functions/1_alphaPred.R")
source("../../1_functions/2_betaPred.R")
source("../../1_functions/3_1_gammaPred_for_application.R")
source("../../1_functions/4_etaPred_for_application.R")
source("../../1_functions/5_application.R")
source("./functions4data/MLEs.R")
covariates <- c("wtkg","gender","karnof","str2","symptom")
case_trial <- 11
C <- rep(1,nrow(ACTG175))
for(c in covariates){
print(c)
if(c == 'age' | c == 'wtkg' | c == 'karnof'){
C <- cbind(C,scale(select(ACTG175,c)))
}
else{
C <- cbind(C,select(ACTG175,c))
}
}
C <- as.data.frame(C)
colnames(C)[1] <- "bias"
A <- ACTG175$cd40
A <- scale(A)
Z <- (ACTG175$arms == 1 | ACTG175$arms == 2)
S <- (ACTG175$cens & (ACTG175$days<7*96))
S[S] <- 1
# S <- ACTG175$offtrt==0
delta_cd4 <- ACTG175$cd496 - ACTG175$cd40
R <- (ACTG175$r == 1)
R[R] <- 1
Y <- c()
for(i in 1:length(delta_cd4)){
if(is.na(delta_cd4[i])){
Y <- c(Y,NA)
}
# else if(delta_cd4[i] - medi_delta > 0){
else if(delta_cd4[i] > 0){
Y <- c(Y,1)
}
else{
Y <- c(Y,0)
}
}
Y[is.na(Y)] <- -1
dat <- cbind(C,A,Z,S,Y,R)
head(dat)
# 3. Model Building & Parameter Estimation-------------------------------------------------------
dat_obs <- dat
dim_status <- c(ncol(C),1,1,1,1,1)
### pr(R = 1 | S = 1 ,A, C, Y; alpha)
### pr(S = 1 | Z = 1, A ,C; beta1)
### pr(S = 1 | Z = 0, A ,C; beta01)
### E[Y | Z = 1, G = g, C ] = \mu_g(C; \gamma_g)
### E[Y | Z = 0, S = 1, C] = m(C; \eta)
## initial values
set.seed(20230701)
ini_val_alpha <- runif( (ncol(C)+2))
ini_val_beta1 <- runif( ncol(C) + 1)
ini_val_beta01 <- runif( ncol(C) + 1)
ini_val_gamma_LL <- runif(ncol(C))
ini_val_gamma_LD <- runif(ncol(C))
ini_val_eta <- runif(ncol(C))
hat_alpha <-
alphaPred(ini_val_alpha = ini_val_alpha,
C,
A,
Z,
S,
Y,
R,
dim_status = dim_status)$coefficients
beta_estimate <-
optim(
c(ini_val_beta1, ini_val_beta01),
Neg_MLE,
data = select(dat_obs, c('bias',covariates,'A','Z','S')),
method = "BFGS"
)$par
hat_beta1 <- beta_estimate[1:(ncol(C) + 1)]
hat_beta01 <- beta_estimate[(ncol(C) + 2):length(beta_estimate)]
rm(list = c("beta_estimate"))
hat_gamma_BB<- gammaPred_BB(ini_val_gamma_LL,
ini_val_gamma_LD,
C,
A,
Z,
S,
Y,
R,
dim_status,
hat_alpha,
hat_beta1,
hat_beta01)
hat_gamma <- hat_gamma_BB$par
hat_gamma_LL <- hat_gamma[1:(length(hat_gamma)/2)]
hat_gamma_LD <- hat_gamma[(length(hat_gamma)/2+1):length(hat_gamma)]
### singular:: to check the gradients. rank(A*A^T) = rank(A), A is gradients of m_sum
hat_eta <- etaPred(
ini_val_eta = ini_val_eta,
C,
A,
Z,
S,
Y,
R,
dim_status = dim_status,
hat_alpha = hat_alpha,
hat_beta1 = hat_beta1,
hat_beta01 = hat_beta01
)$coefficients
# f(G = LL | A, C)
theta1_value <-  expit(as.matrix(cbind(C, A)) %*% hat_beta1)
theta01_value <- expit(as.matrix(cbind(C, A)) %*% hat_beta01)
fLLAC <- theta1_value * theta01_value
# Pr(G = LL | A,C)
ELLAC <- mean(fLLAC)
ELLLDAC <- mean(theta1_value)
#P_sz(A,C) = Pr(S = 1 \ Z = z, A, C) = expit((A,C)\xi_1z)  MLE method to estimate
set.seed(20240201)
# ini_val_xi_11 <- runif(ncol(C) + 1)
# ini_val_xi_10 <- runif(ncol(C) + 1)
# xi_P_11 <-
#   optim(
#     ini_val_xi_11,
#     Neg_MLE_P_s1,
#     data = dat,
#     method = "BFGS"
#   )$par
# xi_P_10 <-
#   optim(
#     ini_val_xi_10,
#     Neg_MLE_P_s0,
#     data = dat,
#     method = "BFGS"
#   )$par
#P_Y11z1 = Pr(Y = 1 | S = 1, A, C, Z = 1, R = 1) = expit((A,C) xi_y_1111)
ini_val_xi_y_1111 <- runif(ncol(C) + 1)
ini_val_xi_y_1101 <- runif(ncol(C) + 1)
xi_y_1111 <-
optim(
ini_val_xi_y_1111,
Neg_MLE_P_Y1111,
data = dat,
method = "BFGS"
)$par
xi_y_1101 <-
optim(
ini_val_xi_y_1101,
Neg_MLE_P_Y1101,
data = dat,
method = "BFGS"
)$par
# P_R111 = Pr(R = 1 | S = 1, Z = 1, A, C) = expit((A,C) xi_r_111)
ini_val_xi_r_111 <- runif(ncol(C) + 1)
ini_val_xi_r_110 <- runif(ncol(C) + 1)
xi_r_111 <-
optim(
ini_val_xi_r_111,
Neg_MLR_R_111,
data = dat,
method = "BFGS"
)$par
xi_r_110 <-
optim(
ini_val_xi_r_110,
Neg_MLR_R_111,
data = dat,
method = "BFGS"
)$par
# 4. Compute Bound --------------------------------------------------------
# Pr(G = LL)
Pr_G_LL <- ELLAC
# Pr(G = LL) + Pr(G = LD)
Pr_G_LLLD <- ELLLDAC
gamma <- Pr_G_LL/Pr_G_LLLD
# \pi_1
pi_1_U <- mean(
(expit(as.matrix(cbind(C, A)) %*% xi_y_1111) * expit(as.matrix(cbind(C, A)) %*% xi_r_111)
+ (1 -  expit(as.matrix(cbind(C, A)) %*%  xi_r_111))) * theta1_value
)/ELLLDAC
pi_1_L <- mean(
(expit(as.matrix(cbind(C, A)) %*% xi_y_1111) * expit(as.matrix(cbind(C, A)) %*% xi_r_111)
) * theta1_value
)/ELLLDAC
# \xi
xi_U <- mean(
(expit(as.matrix(cbind(C, A)) %*% xi_y_1101) * expit(as.matrix(cbind(C, A)) %*% xi_r_110)
+  (1 - expit(as.matrix(cbind(C, A)) %*% xi_r_110))) * fLLAC
)/ELLAC
xi_L <- mean(
(expit(as.matrix(cbind(C, A)) %*% xi_y_1101) * expit(as.matrix(cbind(C, A)) %*% xi_r_110)
) * fLLAC
)/ELLAC
min_bound <- max(0,(pi_1_L - 1 + gamma)/gamma) - xi_U
max_bound <- min(1, pi_1_U/gamma) - xi_L
xi_U
xi_L
max(0,(pi_1_L - 1 + gamma)/gamma)
min(1, pi_1_U/gamma)
pi_1_U
gamma
### Bound
load("2_Simulations/Bound/Repeat_bound_ori_gene1000_N8000.RData")
lower_bounds <- NULL
upper_bounds <- NULL
# 1. Packages -------------------------------------------------------------
rm(list = ls())
library(dplyr)
library(gmm)
library(parallel)
library(speff2trial)
# 2. Data processing ------------------------------------------------------
data("ACTG175")
source("../../1_functions/0_basic_functions.R")
source("../../1_functions/1_alphaPred.R")
source("../../1_functions/2_betaPred.R")
source("../../1_functions/3_1_gammaPred_for_application.R")
source("../../1_functions/4_etaPred_for_application.R")
source("../../1_functions/5_application.R")
source("./functions4data/MLEs.R")
getwd()
# 1. Packages -------------------------------------------------------------
rm(list = ls())
library(dplyr)
library(gmm)
library(parallel)
library(speff2trial)
# 2. Data processing ------------------------------------------------------
data("ACTG175")
# 2. Data processing ------------------------------------------------------
data("ACTG175")
source("../1_functions/0_basic_functions.R")
source("../1_functions/1_alphaPred.R")
source("../1_functions/2_betaPred.R")
source("../1_functions/3_1_gammaPred_for_application.R")
source("../1_functions/4_etaPred_for_application.R")
source("../1_functions/5_application.R")
source("./r_code/functions4data/MLEs.R")
head(ACTG175)
attach(ACTG175)
hist(karnof)
