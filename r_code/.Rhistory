{
### expit function
## input: linear term
## output: 1/(1+exp(-linear_term))
return(1/(1+exp(-linear_term)))
}
alphaPred <- function(ini_val_alpha, C, A, Z, S, Y, R, dim_status) {
# The function alphaPred is used to predict parameters in pr(R = 1| S = 1 ,A, C, Y; alpha)
# input:
# alpha: initial value;
# C: observed covariates;
# A: another observed covariate(show up in assumption)
# Z: treatment
# S: survival status
# Y: outcome
# R: missing indicator
# output:
# the estimates of alpha in pr(R = 1| S = 1 ,A, C, Y; alpha)
x <- cbind(C, A, Z, S, Y, R)  ## better to be more data-adaptive
## Moments function
g <- function(alpha, x) {
C <- x[, 1:dim_status[1]]
A <- x[, dim_status[1] + 1]
Z <- x[, dim_status[1] + 2]
S <- x[, dim_status[1] + 3]
Y <- x[, dim_status[1] + 4]
R <- x[, dim_status[1] + 5]
pr_R1 <- expit(as.matrix(cbind(C, A, Y)) %*% alpha)
h_dim_expand <- cbind(C, A, Y)
m <- NULL
for (i in 1:ncol(h_dim_expand)) {
m <- cbind(m, as.matrix((R / pr_R1 - 1) * S * h_dim_expand[, i]))
}
return(m)
}
res <- gmm(g, x, ini_val_alpha, vcov  = "iid")
return(res)
}
Neg_MLE <- function(data, par) {
# The function Neg_MLE is to compute the -MLE and then to estimate the parameter
# input:
# data = cbind(C,A,Z,S), where, C are observed covariates; A is another observed covariate; S: survival status and Z = 1
# par is initial parameter.
# output:
# - MLE
len_par <- length(par)
beta1 <- par[1:(len_par / 2)]
beta01 <- par[(len_par / 2 + 1):len_par]
data$theta1_value <- expit(as.matrix(data[, 1:(ncol(C) + 1)]) %*% beta1)
data$theta01_value <- expit(as.matrix(data[, 1:(ncol(C) + 1)]) %*% beta01)
df_sur <- data[data$S == 1, ]
df_over <- data[data$S == 0, ]
## df_zs symbols
df_11 <- df_sur[df_sur$Z == 1, ]
df_01 <- df_sur[df_sur$Z == 0, ]
df_10 <- df_over[df_over$Z == 1, ]
df_00 <- df_over[df_over$Z == 0, ]
## pr_zs symbol
# pr_set_11 <- as.matrix(df_11[,1:(ncol(df_11)-2)])%*%beta1
pr_11 <- df_11$theta1_value
# pr_set_01 <- as.matrix(df_01[,1:(ncol(df_01)-2)])%*%beta2
pr_01 <- df_01$theta1_value * df_01$theta01_value
# pr_set_10 <- as.matrix(df_10[,1:(ncol(df_10)-2)])%*%beta1
pr_10 <- 1 - df_10$theta1_value
# pr_set_00 <- as.matrix(df_00[,1:(ncol(df_00)-2)])%*%beta2
pr_00 <- 1 - df_00$theta1_value * df_00$theta01_value
pr_s <- c(log(pr_11), log(pr_01), log(pr_10), log(pr_00))
res <- sum(-pr_s)
return(res)
}
gammaPred_BB <- function(ini_val_gamma_LL,
ini_val_gamma_LD,
C,
A,
Z,
S,
Y,
R,
dim_status,
hat_alpha,
hat_beta1,
hat_beta01) {
# The function gammaPred is used to predict parameters in E[Y | Z = 1, G = g, C] = \mu_g(C ; \gamma_g)
# input:
# ini_val_gamma_LL: initial value of gamma_LL
# ini_val_gamma_LD: initial value of gamma_LD
# C: observed covariates;
# A: another observed covariate(show up in assumption)
# Z: treatment
# S: suvival status
# Y: outcome
# R: missing indicator
# dim_status: dimensions
# hat_alpha: estimated alpha
# hat_beta1: estimated beta1
# hat_beta01: estimated beta01
# output:
# the estimates of gamma_LL and gamma_LD in E[Y | Z = 1, G = g, C] = \mu_g(C ; \gamma_g)
x <- cbind(C, A, Z, S, Y, R)
# Moments function
g_gamma <- function(gamma) {
### Moments function of gamma_LL and gamma_LD in E[Y | Z = 1, G = g, C] = \mu_g(C ; \gamma_g)
# input:
# gamma: c(gamma_LL and gamma_LD)
# x: cbind(C,A,Z,S,Y,R)
# output:
# Moments to be equal to zero.
len_gamma = length(gamma)
gamma_LL <- gamma[1:(len_gamma / 2)]
gamma_LD <- gamma[(len_gamma / 2 + 1):len_gamma]
C <- x[, 1:(dim_status[1])]
A <- x[, (dim_status[1] + 1)]
Z <- x[, (dim_status[1] + 2)]
S <- x[, (dim_status[1] + 3)]
Y <- x[, (dim_status[1] + 4)]
R <- x[, (dim_status[1] + 5)]
pr_R1 <- expit(as.matrix(cbind(C, A, Y)) %*% hat_alpha)
pr_G_LL_ZS1 <- expit(as.matrix(cbind(C, A)) %*% hat_beta01)
pr_G_LD_ZS1 <- 1 - pr_G_LL_ZS1
mu_LL <- expit(as.matrix(C) %*% gamma_LL)
mu_LD <- expit(as.matrix(C) %*% gamma_LD)
m_sum <- mu_LL * pr_G_LL_ZS1 + mu_LD * pr_G_LD_ZS1
m1 <- (R / pr_R1) * (Y - m_sum) * Z * S
pi_0 <- pr_G_LL_ZS1
pi_0_c <- pi_0 * C[, 2]
pi_1 <- pr_G_LD_ZS1
pi_1_c <- pi_1 * C[,2]
h_dim_expand <- as.matrix(cbind(pi_0, pi_1, pi_0_c, pi_1_c))
moments <- NULL
for (i in 1:ncol(h_dim_expand)) {
moments <- cbind(moments, m1 * h_dim_expand[, i])
}
return(c(sum(moments[,1]),sum(moments[,2]),sum(moments[,3]),sum(moments[,4])))
}
ini_gamma <- c(ini_val_gamma_LL, ini_val_gamma_LD)
res <- BBsolve(par  = ini_gamma,fn = g_gamma)
return(res)
}
etaPred <-
function(ini_val_eta,
C,
A,
Z,
S,
Y,
R,
dim_status,
hat_alpha,
hat_beta1,
hat_beta01) {
# The function gammaPred is used to predict parameters in E[Y | Z = 0, S = 1 , C] = m(C; \eta)
# input:
# eta: initial value of eta
# C: observed covariates;
# A: another observed covariate(show up in assumption)
# Z: treatment
# S: survival status
# Y: outcome
# R: missing indicator
# hat_alpha: estimated alpha
# hat_beta1: estimated beta1
# hat_beta01: estimated beta01
# output:
# the estimates of eta in E[Y | Z = 0, S = 1 , C] = m(C; \eta)
x <- cbind(C, A, Z, S, Y, R)
# Moments function
g_eta <- function(eta, x) {
### Moments function of eta in E[Y | Z = 0, S = 1 , C] = m(C; \eta)
# input:
# eta: initial value of eta
# x: cbind(C,A,Z,S,Y,R)
# output:
# Moments to be equal to zero.
C <- x[, 1:(dim_status[1])]
A <- x[, (dim_status[1] + 1)]
Z <- x[, (dim_status[1] + 2)]
S <- x[, (dim_status[1] + 3)]
Y <- x[, (dim_status[1] + 4)]
R <- x[, (dim_status[1] + 5)]
pr_R1 <- expit(as.matrix(cbind(C, A, Y)) %*% hat_alpha)
m_Ceta <- expit(as.matrix(C) %*% eta)
m <- (R / pr_R1) * (Y - m_Ceta) * (1 - Z) * S
pr_G_LL_ZS1 <- expit(as.matrix(cbind(C, A)) %*% hat_beta01)
pr_G_LD_ZS1 <- 1 - pr_G_LL_ZS1
h_dim_expand <-
cbind(pr_G_LL_ZS1, pr_G_LL_ZS1 * C[, 2]) ### WHY pi_0 and pi_0 * C here?  NONONO, it makes no sense.
# # try another choice
h_dim_expand <- C
moments <- NULL
for (i in 1:ncol(h_dim_expand)) {
to_add <- m * h_dim_expand[, i]
moments <- as.matrix(cbind(moments, to_add))
}
return(moments)
}
res <- gmm(g_eta, x, ini_val_eta, vcov = 'iid')
return(res)
}
dat<- data_generate(seeds)
dat$C1 <- ifelse(dat$C1>0,1,0)
dat$A <- ifelse(dat$A > 0,1,0)
dat_obs <- select(dat, c('bias', 'C1', 'A', 'Z', 'S', 'Y', 'R'))
C <- dat_obs[,1:2]
A <- dat_obs[,3]
Z <- dat_obs[,4]
S <- dat_obs[,5]
Y <- dat_obs[,6]
R <- dat_obs[,7]
dim_status <- c(2,1,1,1,1,1)
# 2. Parameter Estimation ------------------------------------------------------
### pr(R = 1| S = 1 ,A, C, Y; alpha)
## initial values
ini_val_alpha <- c(0.1, 0.3, 2, 0.8) - c(0.1, 0.3, 2, 0.8)
ini_val_beta1 <- c(1, 0.9, 0.9) - c(1, 0.9, 0.9)
ini_val_beta01 <- c(0.1,-0.3, 1.2) - c(0.1,-0.3, 1.2)
ini_val_gamma_LL <- c(0.3, 0.9) - c(0.3, 0.9)
ini_val_gamma_LD <- c(0.2, 0.9) - c(0.2, 0.9)
ini_val_eta <- c(-0.1, 0.8) - c(-0.1, 0.8)
hat_alpha <-
alphaPred(ini_val_alpha = ini_val_alpha,
C,
A,
Z,
S,
Y,
R,
dim_status = dim_status)$coefficients
beta_estimate <-
optim(
c(ini_val_beta1, ini_val_beta01),
Neg_MLE,
data = select(dat_obs, c('bias', 'C1', 'A', 'Z', 'S')),
method = "BFGS"
)$par
hat_beta1 <- beta_estimate[1:(ncol(C) + 1)]
hat_beta01 <- beta_estimate[(ncol(C) + 2):length(beta_estimate)]
rm(list = c("beta_estimate"))
hat_gamma_BB<- gammaPred_BB(ini_val_gamma_LL,
ini_val_gamma_LD,
C,
A,
Z,
S,
Y,
R,
dim_status,
hat_alpha,
hat_beta1,
hat_beta01)
hat_gamma <- hat_gamma_BB$par
hat_gamma_LL <- hat_gamma[1:(length(hat_gamma)/2)]
hat_gamma_LD <- hat_gamma[(length(hat_gamma)/2+1):length(hat_gamma)]
### singular:: to check the gradients. rank(A*A^T) = rank(A), A is gradients of m_sum
hat_eta <- etaPred(
ini_val_eta = ini_val_eta,
C,
A,
Z,
S,
Y,
R,
dim_status = dim_status,
hat_alpha = hat_alpha,
hat_beta1 = hat_beta1,
hat_beta01 = hat_beta01
)$coefficients
# 3. Estimation of causal effect ------------------------------------------
### step 1: Estimate E(Y_0 | G = LL)
# f(G = LL | A, C)
theta1_value <-  expit(as.matrix(cbind(C, A)) %*% hat_beta1)
theta01_value <- expit(as.matrix(cbind(C, A)) %*% hat_beta01)
fLLAC <- theta1_value * theta01_value
rm(list = c("theta01_value","theta1_value"))
# E f(G = LL | A,C)
ELLAC <- mean(fLLAC)
## E(Y_0 | G = LL ,A ,C) and E(Y_0 | G = LL)
E0LLAC <- expit(as.matrix(C) %*% hat_eta)
E0LL <- mean(E0LLAC * fLLAC) / ELLAC
print(E0LL)
### step 2: Estimate E(Y_1 | G = LL),
E1LLAC <- expit(as.matrix(C) %*% hat_gamma_LL)
E1LL <- mean(E1LLAC * fLLAC) / ELLAC
print(E1LL)
## step 3: Causal effect
CE <- E1LL - E0LL
print(CE)
# 4 Compute Some Terms ---------------------------------------------------
##### Some generic functions
f <- function(a,c,dat){
## compute the empirical probability of A and C
dat_cur <- dat[dat$A == a,]
dat_cur <- dat_cur[dat_cur$C1 == c,]
return(dim(dat_cur)[1]/dim(dat)[1])
}
Pr_S_ACZ <- function(s,a,c,z,dat){
## compute the empirical probability of Pr(S = s | A = a, C = c, Z = z)
dat_cur <- dat[(dat$A == a) & (dat$C1 == c) & (dat$Z == z),]
dat_cur_S <- dat_cur[dat_cur$S == s, ]
return(dim(dat_cur_S)[1]/dim(dat_cur)[1])
}
Pr_Y_SACZR <- function(y,s,a,c,z,r,dat){
## compute the empirical probability of Pr(Y = y | S = s, A = a,C = c,Z = z, R = r)
dat_cur <- dat[(dat$S == s) & (dat$A == a) & (dat$C1 == c) & (dat$Z == z) & (dat$R == r),]
dat_cur_Y <- dat_cur[dat_cur$Y == y,]
return(dim(dat_cur_Y)[1]/dim(dat_cur)[1])
}
Pr_R_SACZ <- function(r,s,a,c,z,dat){
dat_cur <- dat[(dat$S == s) & (dat$A == a) & (dat$C1 == c) & (dat$Z == z),]
dat_cur_R <- dat_cur[dat_cur$R == r,]
return(dim(dat_cur_R)[1]/dim(dat_cur)[1])
}
int_S_Z <- function(s,z,dat){
## compute \int_{A,C} Pr{S = s | Z = z, A, C}f(A,C) d\mu(A)d\mu(C)
# integration <- 0
# for(a in 0:1){
#   for(c in 0:1){
#     integration = integration + Pr_S_ACZ(s,a,c,z,dat)*f(a,c,dat)
#   }
# }
# return(integration)
dat_cur <- dat[dat$Z ==0,]
dat_final <- dat_cur[dat_cur$S==1,]
res <- dim(dat_final)[1]/dim(dat_cur)[1]
return(res)
}
int_Y_SZR <- function(y,s,z,r,dat){
## compute \int_{A,C} Pr(Y = y | S = s, Z = z, R =r ,A, C)f(A,C)d\mu(A)d\mu(C)
integration <- 0
for(a in 0:1){
for(c in 0:1){
integration = integration + Pr_Y_SACZR(y,s,a,c,z,r,dat)*f(a,c,dat)
}
}
return(integration)
}
f_AC_LL <- function(a,c,dat){
## compute f(A,C | G = LL)
res <- Pr_S_ACZ(1,a,c,0,dat)*f(a,c,dat)/int_S_Z(1,0,dat)
return(res)
}
f_AC_S1 <- function(a,c,dat){
## compute f(A,C | S(1) = 1)
res <- Pr_S_ACZ(1,a,c,1,dat)*f(a,c,dat)/int_S_Z(1,1,dat)
return(res)
}
##### Compute values
##### Compute values
# gamma_proportion <- int_S_Z(1,0,dat)/(1 - int_S_Z(0,1,dat))
gamma_proportion <- function(a,c,dat){
res <- Pr_S_ACZ(1,a,c,0,dat)/Pr_S_ACZ(1,a,c,1,dat)
}
##### change code start
## a_u
int_a_u <- 0
for(a in 0:1){
for(c in 0:1){
pi_x_u <- (Pr_Y_SACZR(1,1,a,c,1,1,dat)*Pr_R_SACZ(1,1,a,c,1,dat)+Pr_R_SACZ(0,1,a,c,1,dat))
x_gamma <- gamma_proportion(a,c,dat)
x_a_u <- pi_x_u/x_gamma
int_a_u = int_a_u + min(1, x_a_u)*f_AC_LL(a,c,dat)
}
}
## a_l
int_a_l <- 0
for(a in 0:1){
for(c in 0:1){
x_gamma <- gamma_proportion(a,c,dat)
pi_x_l <- Pr_Y_SACZR(1,1,a,c,1,1,dat)*Pr_R_SACZ(1,1,a,c,1,dat)
x_a_l <- pi_x_l/x_gamma - (1 - x_gamma)/x_gamma
int_a_l = int_a_l + max(0,x_a_l)*f_AC_LL(a,c,dat)
}
}
int_a_l <- max(0,int_a_l)
#b_u
int_b_u <- 0
for(a in 0:1){
for(c in 0:1){
int_b_u <- int_b_u + (Pr_Y_SACZR(1,1,a,c,0,1,dat)*Pr_R_SACZ(1,1,a,c,0,dat) + Pr_R_SACZ(0,1,a,c,0,dat))*f_AC_LL(a,c,dat)
}
}
int_b_l <- 0
for(a in 0:1){
for(c in 0:1){
int_b_l <- int_b_l + (Pr_Y_SACZR(1,1,a,c,0,1,dat)*Pr_R_SACZ(1,1,a,c,0,dat))*f_AC_LL(a,c,dat)
}
}
print(paste("CE falls in interval: [",int_a_l - int_b_u,int_a_u - int_b_l,"]"))
##### change code end
##### bound under randomized trial: start
# delta_z: pr(R(z) = 1 | S(z) = 1 ) = pr(R = 1 | S = 1, Z = z)
delta_z <- function(z,dat){
dat_cur <- dat[dat$S == 1,]
dat_cur <- dat_cur[dat_cur$Z == z,]
dat_final <- dat_cur[dat_cur$R ==1, ]
res <- dim(dat_final)[1]/dim(dat_cur)[1]
return(res)
}
delta_1 <- delta_z(1,dat)
delta_0 <- delta_z(0,dat)
# Pr(S(0) = 1 | S(1) = 1) = Pr(S(0) = 1, S(1) = 1)/Pr(S(1) = 1) = Pr(S(0) = 1)/Pr(S(1) = 1)
# =  Pr(S = 1 | Z = 0)/Pr(S = 1 | Z = 1) under randomized trial
gamma_com <- function(dat){
dat_z_0 <- dat[dat$Z==0,]
dat_cur_0 <- dat_z_0[dat_z_0$S==1,]
dat_z_1 <- dat[dat$Z==1,]
dat_cur_1 <- dat_z_1[dat_z_1$S==1,]
numerator <- dim(dat_cur_0)[1]/dim(dat_z_0)[1]
denome <- dim(dat_cur_1)[1]/dim(dat_z_1)[1]
res <- numerator / denome
return(res)
}
gamma <- gamma_com(dat)
# \xi_{z1} = pr{Y(z) = 1| S(z) = 1, R(z) = 1}
xi_z_1 <- function(z,dat){
dat_cur <- dat[dat$R == 1,]
dat_cur <- dat_cur[dat_cur$Z == z,]
dat_cur <- dat_cur[dat_cur$S==1,]
dat_final <- dat_cur[dat_cur$Y==1,]
res <- dim(dat_final)[1]/dim(dat_cur)[1]
return(res)
}
xi_01 <- xi_z_1(0,dat)
xi_11 <- xi_z_1(1,dat)
pi_1_u <- delta_1 * xi_11 + 1 - delta_1
pi_1_l <- delta_1 * xi_11
theta_111_l <- max(0, pi_1_l/gamma - (1 - gamma)/gamma)
theta_111_u <- min(1,pi_1_u/gamma)
theta_011_u <- delta_0 * xi_01 + 1 - delta_0
theta_011_l <- delta_0 * xi_01
print(paste("CE falls in interval: [",theta_111_l - theta_011_u,theta_111_u - theta_011_l,"]"))
##### bound under randomized trial: end
coverage <- 0
lower_bound <- int_a_l - int_b_u
upper_bound <- int_a_u - int_b_l
lower_bound_random <- theta_111_l - theta_011_u
upper_bound_random <- theta_111_u - theta_011_l
if(true_causal>=lower_bound & true_causal<=upper_bound){
coverage <- 1
}
len_interval <- upper_bound - lower_bound
print(paste("CE falls in interval: [",int_a_l - int_b_u,int_a_u - int_b_l,"]"))
##### Compute Causal Effects
return(c(lower_bound,upper_bound,lower_bound_random,upper_bound_random,len_interval,CE))
}
res <- Bound(seeds)
return(res)
message(paste("Successfully executed seeds: ",seeds))
},
error = function(e){
message('Caught an error!')
print(e)
},
warning = function(w){
message('Caught an warning!')
print(w)
},
finally = {
message('All done, quitting.')
}
)
}
print("res starts")
res <- parLapply(cl,1:(cyc+error_trial),Bound_try)
print("res over")
lower_bounds <- NULL
upper_bounds <- NULL
lower_bounds_random <- NULL
upper_bounds_random <- NULL
len_intervals <- NULL
CEs <- NULL
for(i in 1:(cyc+error_trial)){
tryCatch(
expr = {
lower_bounds <- c(lower_bounds,res[[i]][1])
upper_bounds <- c(upper_bounds,res[[i]][2])
lower_bounds_random <- c(lower_bounds_random,res[[i]][3])
upper_bounds_random <- c(upper_bounds_random,res[[i]][4])
len_intervals <- c(len_intervals,res[[i]][5])
CEs <- c(CEs,res[[i]][6])
message(paste("Successfully added cyc: ",i))
},
error = function(e){
message('Caught an error!')
print(e)
},
warning = function(w){
message('Caught an warning!')
print(w)
},
finally = {
message('All done, quitting.')
}
)
}
print("results over")
time_end <- Sys.time()
time <- time_end - time_start
print(time)
save.image(paste("Repeat_bound_ori_gene_More",cyc,"_N",8000,".RData",sep = ''))
print("saved successfully")
CE_8000
CE_bootstrap
CEs
# 1. Packages -------------------------------------------------------------
rm(list = ls())
library(dplyr)
library(gmm)
library(parallel)
library(speff2trial)
# 2. Data processing ------------------------------------------------------
data("ACTG175")
source("../1_functions/0_basic_functions.R")
